/*
ghps@cin.ufpe.br: Modified to support CSS:

Per Sreenivasa Viswanadha (as posted on the javacc user mailing list), the
original java 1.5 grammar is licensed under the BSD license, so this modified
grammar is also.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


options {
  /*UNICODE_INPUT = true;*/
  /*JAVA_UNICODE_ESCAPE = false;*/
  /*JAVA_UNICODE_ESCAPE = true;*/
  ERROR_REPORTING = true;
  STATIC = false;
}

PARSER_BEGIN(CSSMergeParser)
package de.ovgu.cide.fstgen.parsers.generated_css_merge;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class CSSMergeParser extends AbstractFSTParser
{
 	public CSSMergeParser(){}
}

PARSER_END(CSSMergeParser)


/********************************************
 * THE CSS TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
/*| "\ufffd"*/
}

/* COMMENTS */

MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


/* RESERVED WORDS AND LITERALS */
/* Macro Definition */

TOKEN :
{
  <#ident: (["-"])?(<nmstart>)(<nmchar>)*>
 |
  <#name: (<nmchar>)+>
 |
  <#num: (["0"-"9"])+ | ((["0"-"9"])*"."(["0"-"9"]))+ >
 |
  <#nmstart: ["_","a"-"z","A"-"Z"] | <nonascii> | <escape> >
 |
  <#nmchar: ["_","a"-"z","A"-"Z","0"-"9","-"] | <nonascii> | <escape> >
 |
  <#escape: (<unicode>) | "\\"~["\n","\r","\f","0"-"9","a"-"f"]>
 |
  <#unicode: "\\"(["0"-"9","a"-"f"]){1,6}((["\r","\n"]) | ([ "\n","\r","\t","\f"]))?>
 |
  <#nonascii: ~["\0"-"\177"]>
 |
  <#string: <string1> | <string2> >
 |
  <#string1: "\""(~["\n","\r","\f","\\","\""] | "\\"<nl> | <escape>)*"\"">
 |
  <#string2: "\'"(~["\n","\r","\f","\\","\'"] | "\\"<nl> | <escape>)*"\'">
 |
  <#badstring: <badstring1> | <badstring2> >
 |
  <#badstring1: "\""(~["\n","\r","\f","\\","\""] | "\\"<nl> | <escape>)*>
 |
  <#badstring2: "\'"(~["\n","\r","\f","\\","\'"] | "\\"<nl> | <escape>)*>
 |
  <#nl:  "\n" |"\r""\n" | "\r" |"\f">
 |
  <#A: "a"|("\\0"){0,4}("41"|"61")("\r""\n"|[ "\t","\r","\n","\f"])?>
 |
  <#C: "c"|("\\0"){0,4}("43"|"63")("\r""\n"|[ "\t","\r","\n","\f"])?>
 |
  <#D: "d"|("\\0"){0,4}("44"|"64")("\r""\n"|[ "\t","\r","\n","\f"])?>
 |
  <#E: "e"|("\\0"){0,4}("45"|"65")("\r""\n"|[ "\t","\r","\n","\f"])?>
 |
  <#G: "g"|("\\0"){0,4}("47"|"67")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\g">
 |
  <#H: "h"|("\\0"){0,4}("48"|"68")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\h">
 |
  <#I: "i"|("\\0"){0,4}("49"|"69")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\i">
 |
  <#K: "k"|("\\0"){0,4}("4b"|"6b")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\k">
 |
  <#L: "l"|("\\0"){0,4}("4c"|"6c")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\l">
 |
  <#M: "m"|("\\0"){0,4}("4d"|"6d")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\m">
 |
  <#N: "n"|("\\0"){0,4}("4e"|"6e")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\n">
 |
  <#O: "o"|("\\0"){0,4}("4f"|"6f")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\o">
 |
  <#P: "p"|("\\0"){0,4}("50"|"70")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\p">
 |
  <#R: "r"|("\\0"){0,4}("52"|"72")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\r">
 |
  <#S: "s"|("\\0"){0,4}("53"|"73")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\s">
 |
  <#T: "t"|("\\0"){0,4}("54"|"74")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\t">
 |
  <#U: "u"|("\\0"){0,4}("55"|"75")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\u">
 |
  <#X: "x"|("\\0"){0,4}("58"|"78")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\x">
 |
  <#Z: "z"|("\\0"){0,4}("5a"|"7a")("\r""\n"|[ "\t","\r","\n","\f"])? | "\\z">


/*
baduri1         url\({w}([!#$%&*-\[\]-~]|{nonascii}|{escape})*{w}
baduri2         url\({w}{string}{w}
baduri3         url\({w}{badstring}

é ncessesário adicionar mesmo?
*/
}

/* TOKEN DEFINITION */

TOKEN :
{
  <CDO: "<!--" >
 |
  <CDC: "-->" >
 |
  <INCLUDES: "~=" >
 |
  <DASHMATCH: "|=" >
 |
  <STRING: <string> >
 |
  <BADSTRING: <badstring> >
 |
  <IDENT: <ident> >
 |
  <HASH: "#"<name> >
 |
  <IMPORT_SYM: "@"<I><M><P><O><R><T> >
 |
  <PAGE_SYM: "@"<P><A><G><E> >
 |
  <MEDIA_SYM: "@"<M><E><D><I><A> >
 |
  <CHARSET_SYM: "@""c""h""a""r""s""e""t">
 |
  <IMPORTANT_SYM: "!"<I><M><P><O><R><T><A><N><T>>
 |
  <EMS: <num><E><M> >
 |
  <EXS: <num><E><X>>
 |
  <LENGTH:
        <num><P><X> |
        <num><C><M> |
        <num><P><X> |
        <num><M><M>	|
        <num><C><M>	|
        <num><I><N> |
        <num><P><T> |
        <num><P><C>

  >
 |
  <ANGLE:
         <num><D><E><G> |
         <num><R><A><D> |
         <num><G><R><A><D>
  >
 |
  <TIME:
         <num><M><S> |
         <num><S>
  >
 |
  <FREQ:
         <num><H><Z> |
         <num><K><H><Z>
  >
 |
  <DIMENSION: <num><ident> >
 |
  <PERCENTAGE: <num>"%" >
 |
   <NUMBER: <num> >
 |
   <URI: "url("<string>")" |
          "url("( ["!","#","$","%","&","*","-","~"] | <nonascii> | <escape>)* ")" >
 |
    <FUNCTION: <ident>"(" >
 /*
  < LCURLY: "{" >
 |
   <RCURLY: "}" >
 |
   <LPAREN: "(" >
 |
   <RPAREN: ")" >
 |
   <LBRACKET: "[" >
 |
   <RBRACKET: "]" >
 |
   <SEMICOLON: ";" >
 |
   <COLON: ":" >*/

}
FSTInfo CompilationUnit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=stylesheet(inTerminal){ replaceName(n);} <EOF> {return productionEndNonTerminal("CompilationUnit","-","-");}

 )  }

FSTInfo stylesheet(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=stylesheet1(true){ replaceName(n);}] (n=stylesheet2(true){ replaceName(n);})* (n=stylesheet3(true){ replaceName(n);})* (n=stylesheet4(true){ replaceName(n);})* {return productionEndTerminal("stylesheet","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo stylesheet1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHARSET_SYM> <STRING> ";" {return productionEndTerminal("stylesheet1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo stylesheet2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CDO> {return productionEndTerminal("stylesheet21","-","-","Replacement","Default",first,token);}
 |
	<CDC> {return productionEndTerminal("stylesheet22","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo stylesheet3(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=importt(true){ replaceName(n);} (LOOKAHEAD(2) n=stylesheet2(true){ replaceName(n);})* {return productionEndTerminal("stylesheet3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo stylesheet4(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ruleset(true){ replaceName(n);} {return productionEndTerminal("stylesheet41","-","-","Replacement","Default",first,token);}
 |
	n=media(true){ replaceName(n);} {return productionEndTerminal("stylesheet42","-","-","Replacement","Default",first,token);}
 |
	n=page(true){ replaceName(n);} {return productionEndTerminal("stylesheet43","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo stylesheet5(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=stylesheet3(true){ replaceName(n);} (n=stylesheet2(true){ replaceName(n);})* {return productionEndTerminal("stylesheet5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo importt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IMPORT_SYM> n=inner_import(true){ replaceName(n);} [n=media_list(true){ replaceName(n);}] ";" {return productionEndTerminal("importt","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_import(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STRING> {return productionEndTerminal("inner_import1","-","-","Replacement","Default",first,token);}
 |
	<URI> {return productionEndTerminal("inner_import2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo media(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<MEDIA_SYM> n=media_list(true){ replaceName(n);} "{" (n=ruleset(true){ replaceName(n);})* "}" {return productionEndTerminal("media","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo media_list(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=medium(true){ replaceName(n);} (n=inner_media_list(true){ replaceName(n);})* {return productionEndTerminal("media_list","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_media_list(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," n=medium(true){ replaceName(n);} {return productionEndTerminal("inner_media_list","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo medium(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENT> {return productionEndTerminal("medium","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo page(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<PAGE_SYM> [n=pseudo_page(true){ replaceName(n);}] "{" [n=declaration(true){ replaceName(n);}] (n=inner_page(true){ replaceName(n);})* "}" {return productionEndTerminal("page","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_page(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";" [n=declaration(true){ replaceName(n);}] {return productionEndTerminal("inner_page","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo pseudo_page(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":" <IDENT> {return productionEndTerminal("pseudo_page","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo operator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"/"  {return productionEndTerminal("operator1","-","-","Replacement","Default",first,token);}
 |
	","  {return productionEndTerminal("operator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo combinator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("combinator1","-","-","Replacement","Default",first,token);}
 |
	">"  {return productionEndTerminal("combinator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo unary_operator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"-"  {return productionEndTerminal("unary_operator1","-","-","Replacement","Default",first,token);}
 |
	"+"  {return productionEndTerminal("unary_operator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo property(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENT> {return productionEndTerminal("property","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ruleset(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=selector(true){ replaceName(n);} (n=inner_ruleset1(true){ replaceName(n);})* "{" [n=declaration(true){ replaceName(n);}] (n=inner_ruleset2(true){ replaceName(n);})* "}" {return productionEndTerminal("ruleset","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_ruleset1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," n=selector(true){ replaceName(n);} {return productionEndTerminal("inner_ruleset1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_ruleset2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";" [n=declaration(true){ replaceName(n);}] {return productionEndTerminal("inner_ruleset2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo selector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=simple_selector(true){ replaceName(n);} [n=inner_selector(true){ replaceName(n);}] {return productionEndTerminal("selector","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_selector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=inner_selector1(true){ replaceName(n);} {return productionEndTerminal("inner_selector1","-","-","Replacement","Default",first,token);}
 |
	n=inner_selector2(true){ replaceName(n);} {return productionEndTerminal("inner_selector2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_selector1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=combinator(true){ replaceName(n);} n=selector(true){ replaceName(n);} {return productionEndTerminal("inner_selector1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_selector2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=combinator(true){ replaceName(n);}] n=selector(true){ replaceName(n);} {return productionEndTerminal("inner_selector2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo simple_selector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=element_name(true){ replaceName(n);} (LOOKAHEAD(2) n=inner_simple_selector(true){ replaceName(n);})* {return productionEndTerminal("simple_selector1","-","-","Replacement","Default",first,token);}
 |
	(LOOKAHEAD(2) n=inner_simple_selector(true){ replaceName(n);})+ {return productionEndTerminal("simple_selector2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo inner_simple_selector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<HASH> {return productionEndTerminal("inner_simple_selector1","-","-","Replacement","Default",first,token);}
 |
	n=clazz(true){ replaceName(n);} {return productionEndTerminal("inner_simple_selector2","-","-","Replacement","Default",first,token);}
 |
	n=attrib(true){ replaceName(n);} {return productionEndTerminal("inner_simple_selector3","-","-","Replacement","Default",first,token);}
 |
	n=pseudo(true){ replaceName(n);} {return productionEndTerminal("inner_simple_selector4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo clazz(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." <IDENT> {return productionEndTerminal("clazz","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo element_name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENT> {return productionEndTerminal("element_name1","-","-","Replacement","Default",first,token);}
 |
	"*"  {return productionEndTerminal("element_name2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo attrib(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" <IDENT> [n=innerAttrib(true){ replaceName(n);}] "]" {return productionEndTerminal("attrib","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo innerAttrib(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=innerAttrib1(true){ replaceName(n);} <IDENT> {return productionEndTerminal("innerAttrib1","-","-","Replacement","Default",first,token);}
 |
	<STRING> {return productionEndTerminal("innerAttrib2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo innerAttrib1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("innerAttrib11","-","-","Replacement","Default",first,token);}
 |
	<INCLUDES> {return productionEndTerminal("innerAttrib12","-","-","Replacement","Default",first,token);}
 |
	<DASHMATCH> {return productionEndTerminal("innerAttrib13","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo pseudo(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":" n=innerPseudo(true){ replaceName(n);} {return productionEndTerminal("pseudo","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo innerPseudo(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENT> {return productionEndTerminal("innerPseudo1","-","-","Replacement","Default",first,token);}
 |
	<FUNCTION> [<IDENT>] ")" {return productionEndTerminal("innerPseudo2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo declaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=property(true){ replaceName(n);} ":" n=expr(true){ replaceName(n);} [n=prio(true){ replaceName(n);}] {return productionEndTerminal("declaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo prio(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IMPORTANT_SYM> {return productionEndTerminal("prio","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=term(true){ replaceName(n);} (n=innerExpr(true){ replaceName(n);})* {return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo innerExpr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=operator(true){ replaceName(n);}] n=term(true){ replaceName(n);} {return productionEndTerminal("innerExpr","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo term(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=unary_operator(true){ replaceName(n);}] n=innerTermNumerals(true){ replaceName(n);} {return productionEndTerminal("term1","-","-","Replacement","Default",first,token);}
 |
	<STRING> {return productionEndTerminal("term2","-","-","Replacement","Default",first,token);}
 |
	<IDENT> {return productionEndTerminal("term3","-","-","Replacement","Default",first,token);}
 |
	<URI> {return productionEndTerminal("term4","-","-","Replacement","Default",first,token);}
 |
	n=hexcolor(true){ replaceName(n);} {return productionEndTerminal("term5","-","-","Replacement","Default",first,token);}
 |
	n=function(true){ replaceName(n);} {return productionEndTerminal("term6","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo innerTermNumerals(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<NUMBER> {return productionEndTerminal("innerTermNumerals1","-","-","Replacement","Default",first,token);}
 |
	<PERCENTAGE> {return productionEndTerminal("innerTermNumerals2","-","-","Replacement","Default",first,token);}
 |
	<LENGTH> {return productionEndTerminal("innerTermNumerals3","-","-","Replacement","Default",first,token);}
 |
	<EMS> {return productionEndTerminal("innerTermNumerals4","-","-","Replacement","Default",first,token);}
 |
	<EXS> {return productionEndTerminal("innerTermNumerals5","-","-","Replacement","Default",first,token);}
 |
	<ANGLE> {return productionEndTerminal("innerTermNumerals6","-","-","Replacement","Default",first,token);}
 |
	<TIME> {return productionEndTerminal("innerTermNumerals7","-","-","Replacement","Default",first,token);}
 |
	<FREQ> {return productionEndTerminal("innerTermNumerals8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo function(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<FUNCTION> n=expr(true){ replaceName(n);} ")" {return productionEndTerminal("function","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo hexcolor(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<HASH> {return productionEndTerminal("hexcolor","-","-","Replacement","Default",first,token);}

 )  }

