/* Generated By:JavaCC: Do not edit this line. CSSMergeParser.java */
package br.ufpe.cin.generated;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class CSSMergeParser extends AbstractFSTParser implements CSSMergeParserConstants {
        public CSSMergeParser(){}

  final public FSTInfo CompilationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = attrib(inTerminal);
                               replaceName(n);
    }
    jj_consume_token(0);
                                                         {if (true) return productionEndNonTerminal("CompilationUnit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StyleSheet(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EMS);
    jj_consume_token(EXS);
    jj_consume_token(LENGTH);
                              {if (true) return productionEndTerminal("StyleSheet","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo operator(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
              {if (true) return productionEndTerminal("operator1","-","-","Replacement","Default",first,token);}
      break;
    case 68:
      jj_consume_token(68);
              {if (true) return productionEndTerminal("operator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo unary_operator(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      jj_consume_token(69);
              {if (true) return productionEndTerminal("unary_operator1","-","-","Replacement","Default",first,token);}
      break;
    case 70:
      jj_consume_token(70);
              {if (true) return productionEndTerminal("unary_operator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo property(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("property","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo attrib(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(71);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDES:
    case DASHMATCH:
    case STRING:
    case 73:
      n = innerAttrib(true);
                                          replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(72);
                                                                 {if (true) return productionEndTerminal("attrib","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerAttrib(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDES:
    case DASHMATCH:
    case 73:
      n = innerAttrib1(true);
                              replaceName(n);
      jj_consume_token(IDENT);
                                                        {if (true) return productionEndTerminal("innerAttrib1","-","-","Replacement","Default",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return productionEndTerminal("innerAttrib2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerAttrib1(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
              {if (true) return productionEndTerminal("innerAttrib11","-","-","Replacement","Default",first,token);}
      break;
    case INCLUDES:
      jj_consume_token(INCLUDES);
                    {if (true) return productionEndTerminal("innerAttrib12","-","-","Replacement","Default",first,token);}
      break;
    case DASHMATCH:
      jj_consume_token(DASHMATCH);
                     {if (true) return productionEndTerminal("innerAttrib13","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo pseudo(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(74);
    n = innerPseudo(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("pseudo","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerPseudo(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("innerPseudo1","-","-","Replacement","Default",first,token);}
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(IDENT);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(75);
                                  {if (true) return productionEndTerminal("innerPseudo2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo declaration(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = property(true);
                          replaceName(n);
    jj_consume_token(74);
    n = expr(true);
                                                             replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTANT_SYM:
      n = prio(true);
                                                                                             replaceName(n);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                                                                                {if (true) return productionEndTerminal("declaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo prio(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORTANT_SYM);
                         {if (true) return productionEndTerminal("prio","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = term(true);
                      replaceName(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case IDENT:
      case HASH:
      case EMS:
      case EXS:
      case LENGTH:
      case ANGLE:
      case TIME:
      case FREQ:
      case PERCENTAGE:
      case NUMBER:
      case URI:
      case FUNCTION:
      case 67:
      case 68:
      case 69:
      case 70:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      n = innerExpr(true);
                                                           replaceName(n);
    }
                                                                               {if (true) return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerExpr(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
    case 68:
      n = operator(true);
                           replaceName(n);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n = term(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("innerExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMS:
    case EXS:
    case LENGTH:
    case ANGLE:
    case TIME:
    case FREQ:
    case PERCENTAGE:
    case NUMBER:
    case 69:
    case 70:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
      case 70:
        n = unary_operator(true);
                                 replaceName(n);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      n = innerTermNumerals(true);
                                                                              replaceName(n);
                                                                                                {if (true) return productionEndTerminal("term1","-","-","Replacement","Default",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return productionEndTerminal("term2","-","-","Replacement","Default",first,token);}
      break;
    case IDENT:
      jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("term3","-","-","Replacement","Default",first,token);}
      break;
    case URI:
      jj_consume_token(URI);
               {if (true) return productionEndTerminal("term4","-","-","Replacement","Default",first,token);}
      break;
    case HASH:
      n = hexcolor(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("term5","-","-","Replacement","Default",first,token);}
      break;
    case FUNCTION:
      n = function(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("term6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerTermNumerals(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
                  {if (true) return productionEndTerminal("innerTermNumerals1","-","-","Replacement","Default",first,token);}
      break;
    case PERCENTAGE:
      jj_consume_token(PERCENTAGE);
                      {if (true) return productionEndTerminal("innerTermNumerals2","-","-","Replacement","Default",first,token);}
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
                  {if (true) return productionEndTerminal("innerTermNumerals3","-","-","Replacement","Default",first,token);}
      break;
    case EMS:
      jj_consume_token(EMS);
               {if (true) return productionEndTerminal("innerTermNumerals4","-","-","Replacement","Default",first,token);}
      break;
    case EXS:
      jj_consume_token(EXS);
               {if (true) return productionEndTerminal("innerTermNumerals5","-","-","Replacement","Default",first,token);}
      break;
    case ANGLE:
      jj_consume_token(ANGLE);
                 {if (true) return productionEndTerminal("innerTermNumerals6","-","-","Replacement","Default",first,token);}
      break;
    case TIME:
      jj_consume_token(TIME);
                {if (true) return productionEndTerminal("innerTermNumerals7","-","-","Replacement","Default",first,token);}
      break;
    case FREQ:
      jj_consume_token(FREQ);
                {if (true) return productionEndTerminal("innerTermNumerals8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FUNCTION);
    n = expr(true);
                                 replaceName(n);
    jj_consume_token(75);
                                                       {if (true) return productionEndTerminal("function","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo hexcolor(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(HASH);
                {if (true) return productionEndTerminal("hexcolor","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  public CSSMergeParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xe000,0xe000,0x6000,0x20000,0x20000,0x800000,0xbf068000,0x0,0x0,0xbf068000,0xbf000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x80,0x18,0x60,0x200,0x200,0x200,0x0,0x4,0x0,0x7f,0x18,0x60,0x67,0x1,};
   }

  public CSSMergeParser(CharStream stream) {
    token_source = new CSSMergeParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public CSSMergeParser(CSSMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(CSSMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[76];
    for (int i = 0; i < 76; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 76; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
