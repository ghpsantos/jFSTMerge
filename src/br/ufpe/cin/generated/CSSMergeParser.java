/* Generated By:JavaCC: Do not edit this line. CSSMergeParser.java */
package br.ufpe.cin.generated;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class CSSMergeParser extends AbstractFSTParser implements CSSMergeParserConstants {
        public CSSMergeParser(){}

  final public FSTInfo CompilationUnit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n = attrib(inTerminal);
                               replaceName(n);
    }
    jj_consume_token(0);
                                                         {if (true) return productionEndNonTerminal("CompilationUnit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StyleSheet(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EMS);
    jj_consume_token(EXS);
    jj_consume_token(LENGTH);
                              {if (true) return productionEndTerminal("StyleSheet","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo importt(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORT_SYM);
    n = inner_import(true);
                                           replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = media_list(true);
                                                                                 replaceName(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(67);
                                                                                                        {if (true) return productionEndTerminal("importt","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_import(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return productionEndTerminal("inner_import1","-","-","Replacement","Default",first,token);}
      break;
    case URI:
      jj_consume_token(URI);
               {if (true) return productionEndTerminal("inner_import2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo media(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MEDIA_SYM);
    n = media_list(true);
                                        replaceName(n);
    jj_consume_token(68);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case 71:
      case 76:
      case 77:
      case 78:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      n = ruleset(true);
                                                                               replaceName(n);
    }
    jj_consume_token(69);
                                                                                                       {if (true) return productionEndTerminal("media","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo media_list(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = medium(true);
                        replaceName(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      n = inner_media_list(true);
                                                                    replaceName(n);
    }
                                                                                        {if (true) return productionEndTerminal("media_list","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_media_list(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(70);
    n = medium(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("inner_media_list","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo medium(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("medium","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo page(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(PAGE_SYM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      n = pseudo_page(true);
                                         replaceName(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(68);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = declaration(true);
                                                                                     replaceName(n);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      n = inner_page(true);
                                                                                                                            replaceName(n);
    }
    jj_consume_token(69);
                                                                                                                                                    {if (true) return productionEndTerminal("page","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_page(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(67);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = declaration(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                     {if (true) return productionEndTerminal("inner_page","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo pseudo_page(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(71);
    jj_consume_token(IDENT);
                     {if (true) return productionEndTerminal("pseudo_page","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo operator(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 72:
      jj_consume_token(72);
              {if (true) return productionEndTerminal("operator1","-","-","Replacement","Default",first,token);}
      break;
    case 70:
      jj_consume_token(70);
              {if (true) return productionEndTerminal("operator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo combinator(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
              {if (true) return productionEndTerminal("combinator1","-","-","Replacement","Default",first,token);}
      break;
    case 74:
      jj_consume_token(74);
              {if (true) return productionEndTerminal("combinator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo unary_operator(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
      jj_consume_token(75);
              {if (true) return productionEndTerminal("unary_operator1","-","-","Replacement","Default",first,token);}
      break;
    case 73:
      jj_consume_token(73);
              {if (true) return productionEndTerminal("unary_operator2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo property(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("property","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ruleset(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = selector(true);
                          replaceName(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      n = inner_ruleset1(true);
                                                                    replaceName(n);
    }
    jj_consume_token(68);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = declaration(true);
                                                                                                                 replaceName(n);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      n = inner_ruleset2(true);
                                                                                                                                                            replaceName(n);
    }
    jj_consume_token(69);
                                                                                                                                                                                    {if (true) return productionEndTerminal("ruleset","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_ruleset1(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(70);
    n = selector(true);
                              replaceName(n);
                                                {if (true) return productionEndTerminal("inner_ruleset1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_ruleset2(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(67);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n = declaration(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                                                     {if (true) return productionEndTerminal("inner_ruleset2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo selector(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = simple_selector(true);
                                 replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case HASH:
    case 71:
    case 73:
    case 74:
    case 76:
    case 77:
    case 78:
      n = inner_selector(true);
                                                                           replaceName(n);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                                                                                              {if (true) return productionEndTerminal("selector","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_selector(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_1(2)) {
      n = inner_selector1(true);
                                              replaceName(n);
                                                                {if (true) return productionEndTerminal("inner_selector1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case HASH:
      case 71:
      case 73:
      case 74:
      case 76:
      case 77:
      case 78:
        n = inner_selector2(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("inner_selector2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_selector1(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = combinator(true);
                            replaceName(n);
    n = selector(true);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("inner_selector1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_selector2(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
    case 74:
      n = combinator(true);
                             replaceName(n);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    n = selector(true);
                                                                 replaceName(n);
                                                                                   {if (true) return productionEndTerminal("inner_selector2","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo simple_selector(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case 77:
      n = element_name(true);
                              replaceName(n);
      label_7:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_7;
        }
        n = inner_simple_selector(true);
                                                                                            replaceName(n);
      }
                                                                                                                {if (true) return productionEndTerminal("simple_selector1","-","-","Replacement","Default",first,token);}
      break;
    case HASH:
    case 71:
    case 76:
    case 78:
      label_8:
      while (true) {
        n = inner_simple_selector(true);
                                                     replaceName(n);
        if (jj_2_3(2)) {
          ;
        } else {
          break label_8;
        }
      }
                                                                         {if (true) return productionEndTerminal("simple_selector2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inner_simple_selector(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASH:
      jj_consume_token(HASH);
                {if (true) return productionEndTerminal("inner_simple_selector1","-","-","Replacement","Default",first,token);}
      break;
    case 76:
      n = clazz(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("inner_simple_selector2","-","-","Replacement","Default",first,token);}
      break;
    case 78:
      n = attrib(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("inner_simple_selector3","-","-","Replacement","Default",first,token);}
      break;
    case 71:
      n = pseudo(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("inner_simple_selector4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo clazz(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(76);
    jj_consume_token(IDENT);
                     {if (true) return productionEndTerminal("clazz","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo element_name(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("element_name1","-","-","Replacement","Default",first,token);}
      break;
    case 77:
      jj_consume_token(77);
              {if (true) return productionEndTerminal("element_name2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo attrib(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(78);
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDES:
    case DASHMATCH:
    case STRING:
    case 80:
      n = innerAttrib(true);
                                          replaceName(n);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(79);
                                                                 {if (true) return productionEndTerminal("attrib","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerAttrib(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCLUDES:
    case DASHMATCH:
    case 80:
      n = innerAttrib1(true);
                              replaceName(n);
      jj_consume_token(IDENT);
                                                        {if (true) return productionEndTerminal("innerAttrib1","-","-","Replacement","Default",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return productionEndTerminal("innerAttrib2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerAttrib1(boolean inTerminal) throws ParseException {
                                             Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
      jj_consume_token(80);
              {if (true) return productionEndTerminal("innerAttrib11","-","-","Replacement","Default",first,token);}
      break;
    case INCLUDES:
      jj_consume_token(INCLUDES);
                    {if (true) return productionEndTerminal("innerAttrib12","-","-","Replacement","Default",first,token);}
      break;
    case DASHMATCH:
      jj_consume_token(DASHMATCH);
                     {if (true) return productionEndTerminal("innerAttrib13","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo pseudo(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(71);
    n = innerPseudo(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("pseudo","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerPseudo(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("innerPseudo1","-","-","Replacement","Default",first,token);}
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(IDENT);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(81);
                                  {if (true) return productionEndTerminal("innerPseudo2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo declaration(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = property(true);
                          replaceName(n);
    jj_consume_token(71);
    n = expr(true);
                                                             replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTANT_SYM:
      n = prio(true);
                                                                                             replaceName(n);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                                                                                                                {if (true) return productionEndTerminal("declaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo prio(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORTANT_SYM);
                         {if (true) return productionEndTerminal("prio","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo expr(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = term(true);
                      replaceName(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case IDENT:
      case HASH:
      case EMS:
      case EXS:
      case LENGTH:
      case ANGLE:
      case TIME:
      case FREQ:
      case PERCENTAGE:
      case NUMBER:
      case URI:
      case FUNCTION:
      case 70:
      case 72:
      case 73:
      case 75:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      n = innerExpr(true);
                                                           replaceName(n);
    }
                                                                               {if (true) return productionEndTerminal("expr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerExpr(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
    case 72:
      n = operator(true);
                           replaceName(n);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    n = term(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("innerExpr","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMS:
    case EXS:
    case LENGTH:
    case ANGLE:
    case TIME:
    case FREQ:
    case PERCENTAGE:
    case NUMBER:
    case 73:
    case 75:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
      case 75:
        n = unary_operator(true);
                                 replaceName(n);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      n = innerTermNumerals(true);
                                                                              replaceName(n);
                                                                                                {if (true) return productionEndTerminal("term1","-","-","Replacement","Default",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return productionEndTerminal("term2","-","-","Replacement","Default",first,token);}
      break;
    case IDENT:
      jj_consume_token(IDENT);
                 {if (true) return productionEndTerminal("term3","-","-","Replacement","Default",first,token);}
      break;
    case URI:
      jj_consume_token(URI);
               {if (true) return productionEndTerminal("term4","-","-","Replacement","Default",first,token);}
      break;
    case HASH:
      n = hexcolor(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("term5","-","-","Replacement","Default",first,token);}
      break;
    case FUNCTION:
      n = function(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("term6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo innerTermNumerals(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
                  {if (true) return productionEndTerminal("innerTermNumerals1","-","-","Replacement","Default",first,token);}
      break;
    case PERCENTAGE:
      jj_consume_token(PERCENTAGE);
                      {if (true) return productionEndTerminal("innerTermNumerals2","-","-","Replacement","Default",first,token);}
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
                  {if (true) return productionEndTerminal("innerTermNumerals3","-","-","Replacement","Default",first,token);}
      break;
    case EMS:
      jj_consume_token(EMS);
               {if (true) return productionEndTerminal("innerTermNumerals4","-","-","Replacement","Default",first,token);}
      break;
    case EXS:
      jj_consume_token(EXS);
               {if (true) return productionEndTerminal("innerTermNumerals5","-","-","Replacement","Default",first,token);}
      break;
    case ANGLE:
      jj_consume_token(ANGLE);
                 {if (true) return productionEndTerminal("innerTermNumerals6","-","-","Replacement","Default",first,token);}
      break;
    case TIME:
      jj_consume_token(TIME);
                {if (true) return productionEndTerminal("innerTermNumerals7","-","-","Replacement","Default",first,token);}
      break;
    case FREQ:
      jj_consume_token(FREQ);
                {if (true) return productionEndTerminal("innerTermNumerals8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo function(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FUNCTION);
    n = expr(true);
                                 replaceName(n);
    jj_consume_token(81);
                                                       {if (true) return productionEndTerminal("function","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo hexcolor(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(HASH);
                {if (true) return productionEndTerminal("hexcolor","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_25() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(78)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(76)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(HASH)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  public CSSMergeParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x20000,0x8000,0x60000,0x0,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x20000,0x60000,0x60000,0x0,0x60000,0x40000,0x20000,0xe000,0xe000,0x6000,0x20000,0x20000,0x800000,0xbf068000,0x0,0x0,0xbf068000,0xbf000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x4000,0x0,0x2,0x7080,0x40,0x80,0x0,0x8,0x0,0x140,0x600,0xa00,0x40,0x0,0x8,0x0,0x7680,0x7680,0x600,0x7080,0x5080,0x2000,0x10000,0x10000,0x10000,0x0,0x4,0x0,0xb47,0x140,0xa00,0xa07,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CSSMergeParser(CharStream stream) {
    token_source = new CSSMergeParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSSMergeParser(CSSMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CSSMergeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[82];
    for (int i = 0; i < 82; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 82; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
